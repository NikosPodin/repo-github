
# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки
# типа данных каждого элемента. Использовать функцию type() для проверки типа. Элементы списка можно
# не запрашивать у пользователя, а указать явно, в программе.
print('\nЗадание №1 \n')
example = []
example.append(25)
example.insert(2, (2,4,6))
example.insert(3, {1, 3, 5})
example.insert(4, {'name': 'Victor', 'age':33})
example.insert(5, [6,8, 'distant'])
print(type(example), f' {example} - общий тип данных список')
print(type(example[1]),f' {example[1]} - кортеж')
print(type(example[2]),f' {example[2]} - множество')
print(type(example[3]), f' {example[3]} - словарь')
print(type(example[4]), f' {example[4]} - список')

# 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы
# с индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().
print('\nЗадание №2 \n')
count_numb = int(input('Введите кол-во цифр, который будете вводить: '))
i=0
user_numbers = []
while i!=int(count_numb):
    numb = int(input('введите число: '))
    user_numbers.append(numb)
    i+=1
print(user_numbers)

for a in range(1,count_numb,2):
    print(a)
    user_numbers[a-1], user_numbers[a] = user_numbers[a], user_numbers[a-1]
    print(user_numbers[a-1], user_numbers[a])
print(user_numbers)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится
# месяц (зима, весна, лето, осень). Напишите решения через list и через dict.
print('\nЗадание №3 \n')
#решение через список
months = ['зима', 'весна', 'лето', 'осень']
user_month = 1
spring = [5, 3, 4]
winter = [12, 1, 2]
fall = [9, 10, 11]
summer = [6, 7, 8]
while 13 > user_month > 0:
    user_month = int(input('Введит цифру месяца от 1 до 12 : '))
    print('если надоест,то вбейте любое число больше 12')
    if user_month == winter[2] or user_month == winter[1] or user_month == winter[0]:
        print(months[0])
    elif user_month == spring[0] or user_month == spring[1] or user_month == spring[2]:
        print(months[1])
    elif user_month == fall[0] or user_month == fall[1] or user_month == fall[2]:
        print(months[3])
    elif user_month == summer[0] or user_month == summer[1] or user_month == summer[2]:
        print(months[2])
print('вы вышли из цикла')
print('\nвариант словаря 1')
month = {
    1:'зима',
    2:'зима',
    3:'весна',
    4:'весна',
    5:'весна',
    6:'лето',
    7:'лето',
    8:'лето',
    9:'осень',
    10:'осень',
    11:'осень',
    12:'зима'
}
print(month[(int(input('Введите месяц от 1 до 12: ')))])

print('\nвариант словаря ')
month_new = {
    'spring' : [5, 3, 4],
    'winter' : [12, 1, 2],
    'fall' : [9, 10, 11],
    'summer' : [6, 7, 8]
}

user_month_new = int(input('Введит цифру месяца от 1 до 12 : '))
for month in month_new:
    if user_month_new in month_new[month]:
        print(month)


# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой
# строки. Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.
print('\nЗадание №4 \n')

user_input = input('Введите несколько слов разделённых пробелами: ')
print(type(user_input.split(' ')))
for num, words in enumerate(user_input.split(' ')):
    print('{} {}'.format(num, words[0:10]))


# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы
# с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

i = 0
my_list = [7, 5, 3, 3, 2]
print(my_list)
while i<5:
    new_el = int(input('Введите новый элемент рейтинга: '))
    if new_el in my_list:
        if my_list.count(new_el) == 1:
            my_list.insert(my_list.index(new_el)+1,new_el)
        elif my_list.count(new_el) > 1:
            my_list.insert((my_list.index(new_el)+my_list.count(new_el)), new_el)
    elif 5>new_el>3:
        my_list.insert(my_list.index(5)+1, new_el)
    elif 7>new_el>5:
        my_list.insert(my_list.index(7)+1, new_el)
    elif new_el not in my_list:
        if new_el>my_list[0]:
            my_list.insert(0, new_el)
        elif new_el<my_list[0]:
            my_list.append(new_el)
    print(my_list)
    i += 1

# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж
# хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь
# с параметрами (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно,
# т.е. запрашивать все данные у пользователя.
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара,
# например название, а значение — список значений-характеристик, например список названий товаров.
# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }


print('Не успел сделать, времени больше на практику надо((')